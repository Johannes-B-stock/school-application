/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

export { };

declare global {
  namespace GQL {
    /*******************************
     *                             *
     *          TYPE DEFS          *
     *                             *
     *******************************/
    export interface Query {
      _empty?: string;
      
      /**
       *  get a user's public data
       */
      getPublicUser?: PublicUser;
      getUser?: User;
      hasAdmin?: boolean;
      
      /**
       *  get all schools 
       */
      getSchools?: Array<School>;
      getSchoolInfoForApplication?: School;
      
      /**
       *  get all schoolApplications 
       */
      getSchoolApplications?: Array<SchoolApplication | null>;
      getApplications?: Array<SchoolApplication | null>;
      getMyApplications?: Array<SchoolApplication | null>;
      getApplicationQuestionCollections?: Array<ApplicationQuestionCollection>;
      getMyAddresses?: Array<Address | null>;
    }
    
    /**
     *  a type defining a user's public data 
     */
    export interface PublicUser {
      id: number;
      fullName?: string;
      email: string;
    }
    
    /**
     *  a type defining a user  
     */
    export interface User {
      id: number;
      firstName?: string;
      lastName?: string;
      fullName?: string;
      gender?: string;
      role?: Role;
      marriage?: string;
      maritalStatusDate?: DateTime;
      spouseName?: string;
      children?: number;
      birthday?: DateTime;
      email: string;
      website?: string;
      youtube?: string;
      facebook?: string;
      emailActivated?: boolean;
      talents?: string;
      firstLanguage?: string;
      nativeLanguage?: string;
      secondLanguage?: string;
      secondLanguagePro?: number;
      thirdLanguage?: string;
      thirdLanguagePro?: number;
      otherLanguage?: string;
      otherLanguagePro?: number;
      avatarFileName?: string;
      life?: string;
      addresses?: Array<Address | null>;
    }
    
    export const enum Role {
      USER = 'USER',
      STUDENT = 'STUDENT',
      STAFF = 'STAFF',
      SCHOOLADMIN = 'SCHOOLADMIN',
      ADMIN = 'ADMIN'
    }
    
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
     * `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
     * 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    export type DateTime = any;
    
    export interface Address {
      id: number;
      user?: User;
      street?: string;
      city?: string;
      state?: string;
      zip?: string;
      country?: string;
      nation?: string;
      phone?: string;
      phone2?: string;
    }
    
    export interface School {
      id: number;
      acronym: string;
      name: string;
      online?: boolean;
      hashtag?: string;
      description?: string;
      students?: Array<PublicUser>;
      staffs?: Array<PublicUser>;
      applications?: Array<SchoolApplication>;
      questions?: Array<ApplicationQuestion>;
      startDate?: DateTime;
      endDate?: DateTime;
      outreachStartDate?: DateTime;
      outreachEndDate?: DateTime;
      miniOutreachStartDate?: DateTime;
      miniOutreachEndDate?: DateTime;
      schoolEmail?: string;
      timestamp?: string;
      currency?: string;
      secondary?: boolean;
      applicationFee?: number;
      schoolFee?: number;
      miniOutreachFee?: number;
      outreachFee?: number;
    }
    
    export interface SchoolApplication {
      id?: number;
      status?: string;
      progress?: string;
      accepted?: boolean;
      acceptedDate?: DateTime;
      school?: School;
      transferredFrom?: School;
      answers?: Array<ApplicationAnswer | null>;
      user?: PublicUser;
      created?: DateTime;
      submitted?: DateTime;
    }
    
    export interface ApplicationAnswer {
      id: number;
      schoolApplication?: SchoolApplication;
      answer?: string;
      question?: ApplicationQuestion;
    }
    
    export interface ApplicationQuestion {
      id: number;
      question: string;
      questionCollection: ApplicationQuestionCollection;
    }
    
    export interface ApplicationQuestionCollection {
      id: number;
      name: string;
      description?: string;
      type?: string;
      questions?: Array<ApplicationQuestion | null>;
    }
    
    export interface Mutation {
      _empty?: string;
      
      /**
       *  register a new user 
       */
      createAdmin: UserLogin;
      registerUser: UserLogin;
      
      /**
       *  update User properties 
       */
      updateUser?: User;
      
      /**
       *  login as a user 
       */
      loginUser: UserLogin;
      avatarUpload?: string;
      
      /**
       *  create a new school 
       */
      createSchool?: School;
      updateSchool?: School;
      deleteSchool?: boolean;
      addStudent?: School;
      addStaff?: School;
      removeStudent?: School;
      removeStaff?: School;
      
      /**
       *  create a new schoolApplication 
       */
      createSchoolApplication?: SchoolApplication;
      updateSchoolApplication?: SchoolApplication;
      deleteSchoolApplication?: boolean;
      cancelSchoolApplication?: SchoolApplication;
      acceptApplication?: SchoolApplication;
      createApplicationQuestion: ApplicationQuestion;
      createApplicationQuestionCollection: ApplicationQuestionCollection;
      updateAddress?: Address;
      createAddress?: Address;
      deleteAddress?: Address;
    }
    
    /**
     *  used for creating a new user 
     */
    export interface InputRegisterUser {
      firstName: string;
      lastName: string;
      email: string;
      password: string;
    }
    
    export interface UserLogin {
      token: string;
      user: User;
    }
    
    /**
     *  used for updating an existing user 
     */
    export interface InputUpdateUser {
      id: number;
      firstName?: string;
      lastName?: string;
      gender?: string;
      marriage?: string;
      maritalStatusDate?: DateTime;
      spouseName?: string;
      children?: number;
      birthday?: DateTime;
      website?: string;
      youtube?: string;
      facebook?: string;
      talents?: string;
      firstLanguage?: string;
      nativeLanguage?: string;
      secondLanguage?: string;
      secondLanguagePro?: number;
      thirdLanguage?: string;
      thirdLanguagePro?: number;
      otherLanguage?: string;
      otherLanguagePro?: number;
      life?: string;
    }
    
    /**
     *  used for logging in 
     */
    export interface InputLogin {
      email: string;
      password: string;
    }
    
    /**
     * The `Upload` scalar type represents a file upload.
     */
    export type Upload = any;
    
    /**
     *  input to create a new school 
     */
    export interface InputCreateSchool {
      acronym: string;
      name: string;
      online?: boolean;
      hashtag?: string;
      description?: string;
      startDate?: DateTime;
      endDate?: DateTime;
      outreachStartDate?: DateTime;
      outreachEndDate?: DateTime;
      miniOutreachStartDate?: DateTime;
      miniOutreachEndDate?: DateTime;
      schoolEmail?: string;
      currency?: string;
      secondary?: boolean;
      applicationFee?: number;
      schoolFee?: number;
      miniOutreachFee?: number;
      outreachFee?: number;
      questionCollection?: number;
    }
    
    /**
     *  input to update an existing school 
     */
    export interface InputUpdateSchool {
      id: number;
      acronym?: string;
      name?: string;
      online?: boolean;
      hashtag?: string;
      description?: string;
      startDate?: DateTime;
      endDate?: DateTime;
      outreachStartDate?: DateTime;
      outreachEndDate?: DateTime;
      miniOutreachStartDate?: DateTime;
      miniOutreachEndDate?: DateTime;
      schoolEmail?: string;
      currency?: string;
      secondary?: boolean;
      applicationFee?: number;
      schoolFee?: number;
      miniOutreachFee?: number;
      outreachFee?: number;
      questionCollection?: number;
    }
    
    /**
     *  input to delete an existing school 
     */
    export interface InputDeleteSchool {
      id?: number;
    }
    
    /**
     *  input to add a student 
     */
    export interface InputAddStudent {
      schoolId?: number;
      userId?: number;
    }
    
    /**
     *  input to add a staff 
     */
    export interface InputAddStaff {
      schoolId?: number;
      userId?: number;
      admin?: boolean;
    }
    
    /**
     *  input to add a student 
     */
    export interface InputRemoveStudent {
      schoolId?: number;
      userId?: number;
    }
    
    /**
     *  input to add a staff 
     */
    export interface InputRemoveStaff {
      schoolId?: number;
      userId?: number;
    }
    
    /**
     *  input to create a new schoolApplication 
     */
    export interface InputCreateSchoolApplication {
      userId: number;
      schoolId: number;
      answers?: Array<InputApplicationAnswer | null>;
    }
    
    export interface InputApplicationAnswer {
      answer: string;
      questionId: number;
      question: string;
    }
    
    /**
     *  input to update an existing schoolApplication 
     */
    export interface InputUpdateSchoolApplication {
      id?: number;
      status?: string;
      progress?: string;
      answers?: Array<InputApplicationAnswer | null>;
    }
    
    /**
     *  input to delete an existing schoolApplication 
     */
    export interface InputDeleteSchoolApplication {
      id?: number;
    }
    
    export interface InputCreateApplicationQuestion {
      questionCollection: number;
      question?: string;
    }
    
    export interface InputCreateApplicationQuestionCollection {
      name: string;
      description?: string;
      type?: string;
      questions?: Array<string | null>;
    }
    
    export interface InputUpdateAddress {
      id: number;
      street?: string;
      city?: string;
      state?: string;
      zip?: string;
      nation: number;
      phone?: string;
      phone2?: string;
    }
    
    export interface InputCreateAddress {
      street?: string;
      city?: string;
      state?: string;
      zip?: string;
      nation: number;
      phone?: string;
      phone2?: string;
    }
    
    export interface Subscription {
      _empty?: string;
      
      /**
       *  called when a new school is created 
       */
      schoolCreated?: School;
      
      /**
       *  called when a new schoolApplication is created 
       */
      schoolApplicationCreated?: SchoolApplication;
    }
    
    export interface File {
      filename: string;
      mimetype: string;
      encoding: string;
    }
    
    /*********************************
     *                               *
     *         TYPE RESOLVERS        *
     *                               *
     *********************************/
    /**
     * This interface define the shape of your resolver
     * Note that this type is designed to be compatible with graphql-tools resolvers
     * However, you can still use other generated interfaces to make your resolver type-safed
     */
    export interface Resolver {
      Query?: QueryTypeResolver;
      PublicUser?: PublicUserTypeResolver;
      User?: UserTypeResolver;
      DateTime?: GraphQLScalarType;
      Address?: AddressTypeResolver;
      School?: SchoolTypeResolver;
      SchoolApplication?: SchoolApplicationTypeResolver;
      ApplicationAnswer?: ApplicationAnswerTypeResolver;
      ApplicationQuestion?: ApplicationQuestionTypeResolver;
      ApplicationQuestionCollection?: ApplicationQuestionCollectionTypeResolver;
      Mutation?: MutationTypeResolver;
      UserLogin?: UserLoginTypeResolver;
      Upload?: GraphQLScalarType;
      Subscription?: SubscriptionTypeResolver;
      File?: FileTypeResolver;
    }
    export interface QueryTypeResolver<TParent = any> {
      _empty?: QueryTo_emptyResolver<TParent>;
      getPublicUser?: QueryToGetPublicUserResolver<TParent>;
      getUser?: QueryToGetUserResolver<TParent>;
      hasAdmin?: QueryToHasAdminResolver<TParent>;
      getSchools?: QueryToGetSchoolsResolver<TParent>;
      getSchoolInfoForApplication?: QueryToGetSchoolInfoForApplicationResolver<TParent>;
      getSchoolApplications?: QueryToGetSchoolApplicationsResolver<TParent>;
      getApplications?: QueryToGetApplicationsResolver<TParent>;
      getMyApplications?: QueryToGetMyApplicationsResolver<TParent>;
      getApplicationQuestionCollections?: QueryToGetApplicationQuestionCollectionsResolver<TParent>;
      getMyAddresses?: QueryToGetMyAddressesResolver<TParent>;
    }
    
    export interface QueryTo_emptyResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryToGetPublicUserArgs {
      id: number;
    }
    export interface QueryToGetPublicUserResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryToGetPublicUserArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryToGetUserArgs {
      id?: number;
    }
    export interface QueryToGetUserResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryToGetUserArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryToHasAdminResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryToGetSchoolsArgs {
      online?: boolean;
    }
    export interface QueryToGetSchoolsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryToGetSchoolsArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryToGetSchoolInfoForApplicationArgs {
      schoolId: number;
    }
    export interface QueryToGetSchoolInfoForApplicationResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryToGetSchoolInfoForApplicationArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryToGetSchoolApplicationsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryToGetApplicationsArgs {
      schoolId: number;
    }
    export interface QueryToGetApplicationsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryToGetApplicationsArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryToGetMyApplicationsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryToGetApplicationQuestionCollectionsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryToGetMyAddressesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PublicUserTypeResolver<TParent = any> {
      id?: PublicUserToIdResolver<TParent>;
      fullName?: PublicUserToFullNameResolver<TParent>;
      email?: PublicUserToEmailResolver<TParent>;
    }
    
    export interface PublicUserToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PublicUserToFullNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PublicUserToEmailResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserTypeResolver<TParent = any> {
      id?: UserToIdResolver<TParent>;
      firstName?: UserToFirstNameResolver<TParent>;
      lastName?: UserToLastNameResolver<TParent>;
      fullName?: UserToFullNameResolver<TParent>;
      gender?: UserToGenderResolver<TParent>;
      role?: UserToRoleResolver<TParent>;
      marriage?: UserToMarriageResolver<TParent>;
      maritalStatusDate?: UserToMaritalStatusDateResolver<TParent>;
      spouseName?: UserToSpouseNameResolver<TParent>;
      children?: UserToChildrenResolver<TParent>;
      birthday?: UserToBirthdayResolver<TParent>;
      email?: UserToEmailResolver<TParent>;
      website?: UserToWebsiteResolver<TParent>;
      youtube?: UserToYoutubeResolver<TParent>;
      facebook?: UserToFacebookResolver<TParent>;
      emailActivated?: UserToEmailActivatedResolver<TParent>;
      talents?: UserToTalentsResolver<TParent>;
      firstLanguage?: UserToFirstLanguageResolver<TParent>;
      nativeLanguage?: UserToNativeLanguageResolver<TParent>;
      secondLanguage?: UserToSecondLanguageResolver<TParent>;
      secondLanguagePro?: UserToSecondLanguageProResolver<TParent>;
      thirdLanguage?: UserToThirdLanguageResolver<TParent>;
      thirdLanguagePro?: UserToThirdLanguageProResolver<TParent>;
      otherLanguage?: UserToOtherLanguageResolver<TParent>;
      otherLanguagePro?: UserToOtherLanguageProResolver<TParent>;
      avatarFileName?: UserToAvatarFileNameResolver<TParent>;
      life?: UserToLifeResolver<TParent>;
      addresses?: UserToAddressesResolver<TParent>;
    }
    
    export interface UserToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToFirstNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToLastNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToFullNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToGenderResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToRoleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToMarriageResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToMaritalStatusDateResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToSpouseNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToChildrenResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToBirthdayResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToEmailResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToWebsiteResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToYoutubeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToFacebookResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToEmailActivatedResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToTalentsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToFirstLanguageResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToNativeLanguageResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToSecondLanguageResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToSecondLanguageProResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToThirdLanguageResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToThirdLanguageProResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToOtherLanguageResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToOtherLanguageProResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToAvatarFileNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToLifeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToAddressesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface AddressTypeResolver<TParent = any> {
      id?: AddressToIdResolver<TParent>;
      user?: AddressToUserResolver<TParent>;
      street?: AddressToStreetResolver<TParent>;
      city?: AddressToCityResolver<TParent>;
      state?: AddressToStateResolver<TParent>;
      zip?: AddressToZipResolver<TParent>;
      country?: AddressToCountryResolver<TParent>;
      nation?: AddressToNationResolver<TParent>;
      phone?: AddressToPhoneResolver<TParent>;
      phone2?: AddressToPhone2Resolver<TParent>;
    }
    
    export interface AddressToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface AddressToUserResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface AddressToStreetResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface AddressToCityResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface AddressToStateResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface AddressToZipResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface AddressToCountryResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface AddressToNationResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface AddressToPhoneResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface AddressToPhone2Resolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolTypeResolver<TParent = any> {
      id?: SchoolToIdResolver<TParent>;
      acronym?: SchoolToAcronymResolver<TParent>;
      name?: SchoolToNameResolver<TParent>;
      online?: SchoolToOnlineResolver<TParent>;
      hashtag?: SchoolToHashtagResolver<TParent>;
      description?: SchoolToDescriptionResolver<TParent>;
      students?: SchoolToStudentsResolver<TParent>;
      staffs?: SchoolToStaffsResolver<TParent>;
      applications?: SchoolToApplicationsResolver<TParent>;
      questions?: SchoolToQuestionsResolver<TParent>;
      startDate?: SchoolToStartDateResolver<TParent>;
      endDate?: SchoolToEndDateResolver<TParent>;
      outreachStartDate?: SchoolToOutreachStartDateResolver<TParent>;
      outreachEndDate?: SchoolToOutreachEndDateResolver<TParent>;
      miniOutreachStartDate?: SchoolToMiniOutreachStartDateResolver<TParent>;
      miniOutreachEndDate?: SchoolToMiniOutreachEndDateResolver<TParent>;
      schoolEmail?: SchoolToSchoolEmailResolver<TParent>;
      timestamp?: SchoolToTimestampResolver<TParent>;
      currency?: SchoolToCurrencyResolver<TParent>;
      secondary?: SchoolToSecondaryResolver<TParent>;
      applicationFee?: SchoolToApplicationFeeResolver<TParent>;
      schoolFee?: SchoolToSchoolFeeResolver<TParent>;
      miniOutreachFee?: SchoolToMiniOutreachFeeResolver<TParent>;
      outreachFee?: SchoolToOutreachFeeResolver<TParent>;
    }
    
    export interface SchoolToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolToAcronymResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolToNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolToOnlineResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolToHashtagResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolToDescriptionResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolToStudentsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolToStaffsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolToApplicationsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolToQuestionsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolToStartDateResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolToEndDateResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolToOutreachStartDateResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolToOutreachEndDateResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolToMiniOutreachStartDateResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolToMiniOutreachEndDateResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolToSchoolEmailResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolToTimestampResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolToCurrencyResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolToSecondaryResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolToApplicationFeeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolToSchoolFeeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolToMiniOutreachFeeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolToOutreachFeeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolApplicationTypeResolver<TParent = any> {
      id?: SchoolApplicationToIdResolver<TParent>;
      status?: SchoolApplicationToStatusResolver<TParent>;
      progress?: SchoolApplicationToProgressResolver<TParent>;
      accepted?: SchoolApplicationToAcceptedResolver<TParent>;
      acceptedDate?: SchoolApplicationToAcceptedDateResolver<TParent>;
      school?: SchoolApplicationToSchoolResolver<TParent>;
      transferredFrom?: SchoolApplicationToTransferredFromResolver<TParent>;
      answers?: SchoolApplicationToAnswersResolver<TParent>;
      user?: SchoolApplicationToUserResolver<TParent>;
      created?: SchoolApplicationToCreatedResolver<TParent>;
      submitted?: SchoolApplicationToSubmittedResolver<TParent>;
    }
    
    export interface SchoolApplicationToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolApplicationToStatusResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolApplicationToProgressResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolApplicationToAcceptedResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolApplicationToAcceptedDateResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolApplicationToSchoolResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolApplicationToTransferredFromResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolApplicationToAnswersResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolApplicationToUserResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolApplicationToCreatedResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolApplicationToSubmittedResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ApplicationAnswerTypeResolver<TParent = any> {
      id?: ApplicationAnswerToIdResolver<TParent>;
      schoolApplication?: ApplicationAnswerToSchoolApplicationResolver<TParent>;
      answer?: ApplicationAnswerToAnswerResolver<TParent>;
      question?: ApplicationAnswerToQuestionResolver<TParent>;
    }
    
    export interface ApplicationAnswerToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ApplicationAnswerToSchoolApplicationResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ApplicationAnswerToAnswerResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ApplicationAnswerToQuestionResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ApplicationQuestionTypeResolver<TParent = any> {
      id?: ApplicationQuestionToIdResolver<TParent>;
      question?: ApplicationQuestionToQuestionResolver<TParent>;
      questionCollection?: ApplicationQuestionToQuestionCollectionResolver<TParent>;
    }
    
    export interface ApplicationQuestionToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ApplicationQuestionToQuestionResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ApplicationQuestionToQuestionCollectionResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ApplicationQuestionCollectionTypeResolver<TParent = any> {
      id?: ApplicationQuestionCollectionToIdResolver<TParent>;
      name?: ApplicationQuestionCollectionToNameResolver<TParent>;
      description?: ApplicationQuestionCollectionToDescriptionResolver<TParent>;
      type?: ApplicationQuestionCollectionToTypeResolver<TParent>;
      questions?: ApplicationQuestionCollectionToQuestionsResolver<TParent>;
    }
    
    export interface ApplicationQuestionCollectionToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ApplicationQuestionCollectionToNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ApplicationQuestionCollectionToDescriptionResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ApplicationQuestionCollectionToTypeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface ApplicationQuestionCollectionToQuestionsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationTypeResolver<TParent = any> {
      _empty?: MutationTo_emptyResolver<TParent>;
      createAdmin?: MutationToCreateAdminResolver<TParent>;
      registerUser?: MutationToRegisterUserResolver<TParent>;
      updateUser?: MutationToUpdateUserResolver<TParent>;
      loginUser?: MutationToLoginUserResolver<TParent>;
      avatarUpload?: MutationToAvatarUploadResolver<TParent>;
      createSchool?: MutationToCreateSchoolResolver<TParent>;
      updateSchool?: MutationToUpdateSchoolResolver<TParent>;
      deleteSchool?: MutationToDeleteSchoolResolver<TParent>;
      addStudent?: MutationToAddStudentResolver<TParent>;
      addStaff?: MutationToAddStaffResolver<TParent>;
      removeStudent?: MutationToRemoveStudentResolver<TParent>;
      removeStaff?: MutationToRemoveStaffResolver<TParent>;
      createSchoolApplication?: MutationToCreateSchoolApplicationResolver<TParent>;
      updateSchoolApplication?: MutationToUpdateSchoolApplicationResolver<TParent>;
      deleteSchoolApplication?: MutationToDeleteSchoolApplicationResolver<TParent>;
      cancelSchoolApplication?: MutationToCancelSchoolApplicationResolver<TParent>;
      acceptApplication?: MutationToAcceptApplicationResolver<TParent>;
      createApplicationQuestion?: MutationToCreateApplicationQuestionResolver<TParent>;
      createApplicationQuestionCollection?: MutationToCreateApplicationQuestionCollectionResolver<TParent>;
      updateAddress?: MutationToUpdateAddressResolver<TParent>;
      createAddress?: MutationToCreateAddressResolver<TParent>;
      deleteAddress?: MutationToDeleteAddressResolver<TParent>;
    }
    
    export interface MutationTo_emptyResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCreateAdminArgs {
      input: InputRegisterUser;
    }
    export interface MutationToCreateAdminResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCreateAdminArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToRegisterUserArgs {
      input: InputRegisterUser;
    }
    export interface MutationToRegisterUserResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToRegisterUserArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToUpdateUserArgs {
      input: InputUpdateUser;
    }
    export interface MutationToUpdateUserResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToUpdateUserArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToLoginUserArgs {
      input: InputLogin;
    }
    export interface MutationToLoginUserResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToLoginUserArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToAvatarUploadArgs {
      file: Upload;
    }
    export interface MutationToAvatarUploadResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToAvatarUploadArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCreateSchoolArgs {
      input: InputCreateSchool;
    }
    export interface MutationToCreateSchoolResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCreateSchoolArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToUpdateSchoolArgs {
      input: InputUpdateSchool;
    }
    export interface MutationToUpdateSchoolResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToUpdateSchoolArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToDeleteSchoolArgs {
      input: InputDeleteSchool;
    }
    export interface MutationToDeleteSchoolResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToDeleteSchoolArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToAddStudentArgs {
      input: InputAddStudent;
    }
    export interface MutationToAddStudentResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToAddStudentArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToAddStaffArgs {
      input?: InputAddStaff;
    }
    export interface MutationToAddStaffResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToAddStaffArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToRemoveStudentArgs {
      input: InputRemoveStudent;
    }
    export interface MutationToRemoveStudentResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToRemoveStudentArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToRemoveStaffArgs {
      input?: InputRemoveStaff;
    }
    export interface MutationToRemoveStaffResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToRemoveStaffArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCreateSchoolApplicationArgs {
      input: InputCreateSchoolApplication;
    }
    export interface MutationToCreateSchoolApplicationResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCreateSchoolApplicationArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToUpdateSchoolApplicationArgs {
      input: InputUpdateSchoolApplication;
    }
    export interface MutationToUpdateSchoolApplicationResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToUpdateSchoolApplicationArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToDeleteSchoolApplicationArgs {
      input: InputDeleteSchoolApplication;
    }
    export interface MutationToDeleteSchoolApplicationResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToDeleteSchoolApplicationArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCancelSchoolApplicationArgs {
      input: InputDeleteSchoolApplication;
    }
    export interface MutationToCancelSchoolApplicationResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCancelSchoolApplicationArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToAcceptApplicationArgs {
      appId: number;
    }
    export interface MutationToAcceptApplicationResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToAcceptApplicationArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCreateApplicationQuestionArgs {
      input: InputCreateApplicationQuestion;
    }
    export interface MutationToCreateApplicationQuestionResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCreateApplicationQuestionArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCreateApplicationQuestionCollectionArgs {
      input: InputCreateApplicationQuestionCollection;
    }
    export interface MutationToCreateApplicationQuestionCollectionResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCreateApplicationQuestionCollectionArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToUpdateAddressArgs {
      input: InputUpdateAddress;
    }
    export interface MutationToUpdateAddressResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToUpdateAddressArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCreateAddressArgs {
      input: InputCreateAddress;
    }
    export interface MutationToCreateAddressResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCreateAddressArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToDeleteAddressArgs {
      id: number;
    }
    export interface MutationToDeleteAddressResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToDeleteAddressArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserLoginTypeResolver<TParent = any> {
      token?: UserLoginToTokenResolver<TParent>;
      user?: UserLoginToUserResolver<TParent>;
    }
    
    export interface UserLoginToTokenResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserLoginToUserResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SubscriptionTypeResolver<TParent = any> {
      _empty?: SubscriptionTo_emptyResolver<TParent>;
      schoolCreated?: SubscriptionToSchoolCreatedResolver<TParent>;
      schoolApplicationCreated?: SubscriptionToSchoolApplicationCreatedResolver<TParent>;
    }
    
    export interface SubscriptionTo_emptyResolver<TParent = any, TResult = any> {
      resolve?: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => TResult;
      subscribe: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
    }
    
    export interface SubscriptionToSchoolCreatedResolver<TParent = any, TResult = any> {
      resolve?: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => TResult;
      subscribe: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
    }
    
    export interface SubscriptionToSchoolApplicationCreatedResolver<TParent = any, TResult = any> {
      resolve?: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => TResult;
      subscribe: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
    }
    
    export interface FileTypeResolver<TParent = any> {
      filename?: FileToFilenameResolver<TParent>;
      mimetype?: FileToMimetypeResolver<TParent>;
      encoding?: FileToEncodingResolver<TParent>;
    }
    
    export interface FileToFilenameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface FileToMimetypeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface FileToEncodingResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
  }
}