/* tslint:disable */
import { GraphQLResolveInfo } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

export { };

declare global {
  namespace GQL {
    /*******************************
     *                             *
     *          TYPE DEFS          *
     *                             *
     *******************************/
    export interface Query {
      _empty?: string;
      
      /**
       *  login as a user 
       */
      loginUser?: User;
      
      /**
       *  get a user's public data
       */
      getUser?: PublicUser;
      
      /**
       *  get all posts 
       */
      getPosts?: Array<Post | null>;
      
      /**
       *  get all schools 
       */
      getSchools?: Array<School | null>;
    }
    
    /**
     *  used for logging in 
     */
    export interface InputLogin {
      email: string;
      password: string;
    }
    
    /**
     *  a type defining a user  
     */
    export interface User {
      id?: string;
      firstName?: string;
      lastName?: string;
      email?: string;
      token?: string;
    }
    
    /**
     *  a type defining a user's public data 
     */
    export interface PublicUser {
      id?: string;
      name?: string;
      email?: string;
    }
    
    export interface Post {
      id?: string;
      userId?: string;
      text?: string;
      user?: PublicUser;
      timestamp?: string;
    }
    
    export interface School {
      id?: string;
      abbreviation?: string;
      name?: string;
      summary?: string;
      description?: string;
      students?: Array<PublicUser | null>;
      staffs?: Array<PublicUser | null>;
      startDateTimestamp?: string;
      endDateTimestamp?: string;
      timestamp?: string;
    }
    
    export interface Mutation {
      _empty?: string;
      
      /**
       *  register a new user 
       */
      registerUser?: User;
      updateUser?: User;
      
      /**
       *  create a new post 
       */
      createPost?: Post;
      
      /**
       *  create a new school 
       */
      createSchool?: School;
      updateSchool?: School;
      deleteSchool?: boolean;
      addStudent?: School;
      addStaff?: School;
      removeStudent?: School;
      removeStaff?: School;
    }
    
    /**
     *  used for creating a new user 
     */
    export interface InputRegisterUser {
      firstName: string;
      lastName: string;
      email: string;
      password: string;
    }
    
    /**
     *  used for creating a new user 
     */
    export interface InputUpdateUser {
      id: string;
      firstName: string;
      lastName: string;
      email: string;
    }
    
    /**
     *  input to create a new post 
     */
    export interface InputCreatePost {
      text?: string;
    }
    
    /**
     *  input to create a new school 
     */
    export interface InputCreateSchool {
      abbreviation: string;
      name: string;
      summary?: string;
      description?: string;
      startDateTimestamp?: string;
      endDateTimestamp?: string;
    }
    
    /**
     *  input to update an existing school 
     */
    export interface InputUpdateSchool {
      id?: string;
      abbreviation: string;
      name: string;
      summary?: string;
      description?: string;
      startDateTimestamp?: string;
      endDateTimestamp?: string;
    }
    
    /**
     *  input to delete an existing school 
     */
    export interface InputDeleteSchool {
      id?: string;
    }
    
    /**
     *  input to add a student 
     */
    export interface InputAddStudent {
      schoolId?: string;
      userId?: string;
    }
    
    /**
     *  input to add a staff 
     */
    export interface InputAddStaff {
      schoolId?: string;
      userId?: string;
    }
    
    /**
     *  input to add a student 
     */
    export interface InputRemoveStudent {
      schoolId?: string;
      userId?: string;
    }
    
    /**
     *  input to add a staff 
     */
    export interface InputRemoveStaff {
      schoolId?: string;
      userId?: string;
    }
    
    export interface Subscription {
      _empty?: string;
      
      /**
       *  called when a new post is created 
       */
      postCreated?: Post;
      
      /**
       *  called when a new school is created 
       */
      schoolCreated?: School;
    }
    
    /*********************************
     *                               *
     *         TYPE RESOLVERS        *
     *                               *
     *********************************/
    /**
     * This interface define the shape of your resolver
     * Note that this type is designed to be compatible with graphql-tools resolvers
     * However, you can still use other generated interfaces to make your resolver type-safed
     */
    export interface Resolver {
      Query?: QueryTypeResolver;
      User?: UserTypeResolver;
      PublicUser?: PublicUserTypeResolver;
      Post?: PostTypeResolver;
      School?: SchoolTypeResolver;
      Mutation?: MutationTypeResolver;
      Subscription?: SubscriptionTypeResolver;
    }
    export interface QueryTypeResolver<TParent = any> {
      _empty?: QueryTo_emptyResolver<TParent>;
      loginUser?: QueryToLoginUserResolver<TParent>;
      getUser?: QueryToGetUserResolver<TParent>;
      getPosts?: QueryToGetPostsResolver<TParent>;
      getSchools?: QueryToGetSchoolsResolver<TParent>;
    }
    
    export interface QueryTo_emptyResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryToLoginUserArgs {
      input: InputLogin;
    }
    export interface QueryToLoginUserResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryToLoginUserArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryToGetUserArgs {
      id: string;
    }
    export interface QueryToGetUserResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryToGetUserArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryToGetPostsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryToGetSchoolsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserTypeResolver<TParent = any> {
      id?: UserToIdResolver<TParent>;
      firstName?: UserToFirstNameResolver<TParent>;
      lastName?: UserToLastNameResolver<TParent>;
      email?: UserToEmailResolver<TParent>;
      token?: UserToTokenResolver<TParent>;
    }
    
    export interface UserToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToFirstNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToLastNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToEmailResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToTokenResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PublicUserTypeResolver<TParent = any> {
      id?: PublicUserToIdResolver<TParent>;
      name?: PublicUserToNameResolver<TParent>;
      email?: PublicUserToEmailResolver<TParent>;
    }
    
    export interface PublicUserToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PublicUserToNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PublicUserToEmailResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PostTypeResolver<TParent = any> {
      id?: PostToIdResolver<TParent>;
      userId?: PostToUserIdResolver<TParent>;
      text?: PostToTextResolver<TParent>;
      user?: PostToUserResolver<TParent>;
      timestamp?: PostToTimestampResolver<TParent>;
    }
    
    export interface PostToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PostToUserIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PostToTextResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PostToUserResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PostToTimestampResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolTypeResolver<TParent = any> {
      id?: SchoolToIdResolver<TParent>;
      abbreviation?: SchoolToAbbreviationResolver<TParent>;
      name?: SchoolToNameResolver<TParent>;
      summary?: SchoolToSummaryResolver<TParent>;
      description?: SchoolToDescriptionResolver<TParent>;
      students?: SchoolToStudentsResolver<TParent>;
      staffs?: SchoolToStaffsResolver<TParent>;
      startDateTimestamp?: SchoolToStartDateTimestampResolver<TParent>;
      endDateTimestamp?: SchoolToEndDateTimestampResolver<TParent>;
      timestamp?: SchoolToTimestampResolver<TParent>;
    }
    
    export interface SchoolToIdResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolToAbbreviationResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolToNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolToSummaryResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolToDescriptionResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolToStudentsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolToStaffsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolToStartDateTimestampResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolToEndDateTimestampResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SchoolToTimestampResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationTypeResolver<TParent = any> {
      _empty?: MutationTo_emptyResolver<TParent>;
      registerUser?: MutationToRegisterUserResolver<TParent>;
      updateUser?: MutationToUpdateUserResolver<TParent>;
      createPost?: MutationToCreatePostResolver<TParent>;
      createSchool?: MutationToCreateSchoolResolver<TParent>;
      updateSchool?: MutationToUpdateSchoolResolver<TParent>;
      deleteSchool?: MutationToDeleteSchoolResolver<TParent>;
      addStudent?: MutationToAddStudentResolver<TParent>;
      addStaff?: MutationToAddStaffResolver<TParent>;
      removeStudent?: MutationToRemoveStudentResolver<TParent>;
      removeStaff?: MutationToRemoveStaffResolver<TParent>;
    }
    
    export interface MutationTo_emptyResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToRegisterUserArgs {
      input: InputRegisterUser;
    }
    export interface MutationToRegisterUserResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToRegisterUserArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToUpdateUserArgs {
      input: InputUpdateUser;
    }
    export interface MutationToUpdateUserResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToUpdateUserArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCreatePostArgs {
      input: InputCreatePost;
    }
    export interface MutationToCreatePostResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCreatePostArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCreateSchoolArgs {
      input: InputCreateSchool;
    }
    export interface MutationToCreateSchoolResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCreateSchoolArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToUpdateSchoolArgs {
      input: InputUpdateSchool;
    }
    export interface MutationToUpdateSchoolResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToUpdateSchoolArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToDeleteSchoolArgs {
      input: InputDeleteSchool;
    }
    export interface MutationToDeleteSchoolResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToDeleteSchoolArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToAddStudentArgs {
      input: InputAddStudent;
    }
    export interface MutationToAddStudentResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToAddStudentArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToAddStaffArgs {
      input?: InputAddStaff;
    }
    export interface MutationToAddStaffResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToAddStaffArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToRemoveStudentArgs {
      input: InputRemoveStudent;
    }
    export interface MutationToRemoveStudentResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToRemoveStudentArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToRemoveStaffArgs {
      input?: InputRemoveStaff;
    }
    export interface MutationToRemoveStaffResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToRemoveStaffArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SubscriptionTypeResolver<TParent = any> {
      _empty?: SubscriptionTo_emptyResolver<TParent>;
      postCreated?: SubscriptionToPostCreatedResolver<TParent>;
      schoolCreated?: SubscriptionToSchoolCreatedResolver<TParent>;
    }
    
    export interface SubscriptionTo_emptyResolver<TParent = any, TResult = any> {
      resolve?: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => TResult;
      subscribe: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
    }
    
    export interface SubscriptionToPostCreatedResolver<TParent = any, TResult = any> {
      resolve?: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => TResult;
      subscribe: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
    }
    
    export interface SubscriptionToSchoolCreatedResolver<TParent = any, TResult = any> {
      resolve?: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => TResult;
      subscribe: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
    }
    
  }
}