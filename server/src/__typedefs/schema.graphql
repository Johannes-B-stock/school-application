# source: http://localhost:3000/graphql
# timestamp: Mon May 04 2020 21:46:56 GMT+0200 (GMT+02:00)

type Address {
  id: Int!
  user: User
  street: String
  city: String
  state: String
  zip: String
  country: String
  nation: String
  phone: String
  phone2: String
}

type ApplicationAnswer {
  id: Int!
  schoolApplication: SchoolApplication
  answer: String
  question: ApplicationQuestion
}

type ApplicationQuestion {
  id: Int!
  question: String!
  questionCollection: ApplicationQuestionCollection!
}

type ApplicationQuestionCollection {
  id: Int!
  name: String!
  description: String
  type: String
  questions: [ApplicationQuestion]
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

""" input to add a staff """
input InputAddStaff {
  schoolId: Int
  userId: Int
  admin: Boolean
}

""" input to add a student """
input InputAddStudent {
  schoolId: Int
  userId: Int
}

input InputApplicationAnswer {
  answer: String!
  questionId: Int!
  question: String!
}

input InputCreateAddress {
  street: String
  city: String
  state: String
  zip: String
  nation: Int!
  phone: String
  phone2: String
}

input InputCreateApplicationQuestion {
  questionCollection: Int!
  question: String
}

input InputCreateApplicationQuestionCollection {
  name: String!
  description: String
  type: String
  questions: [String]
}

""" input to create a new school """
input InputCreateSchool {
  acronym: String!
  name: String!
  online: Boolean
  hashtag: String
  description: String
  startDate: DateTime
  endDate: DateTime
  outreachStartDate: DateTime
  outreachEndDate: DateTime
  miniOutreachStartDate: DateTime
  miniOutreachEndDate: DateTime
  schoolEmail: String
  currency: String
  secondary: Boolean
  applicationFee: Int
  schoolFee: Int
  miniOutreachFee: Int
  outreachFee: Int
  questionCollection: Int
}

""" input to create a new schoolApplication """
input InputCreateSchoolApplication {
  userId: Int!
  schoolId: Int!
  answers: [InputApplicationAnswer]
}

""" input to delete an existing school """
input InputDeleteSchool {
  id: Int
}

""" input to delete an existing schoolApplication """
input InputDeleteSchoolApplication {
  id: Int
}

""" used for logging in """
input InputLogin {
  email: String!
  password: String!
}

""" used for creating a new user """
input InputRegisterUser {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
}

""" input to add a staff """
input InputRemoveStaff {
  schoolId: Int
  userId: Int
}

""" input to add a student """
input InputRemoveStudent {
  schoolId: Int
  userId: Int
}

input InputUpdateAddress {
  id: Int!
  street: String
  city: String
  state: String
  zip: String
  nation: Int!
  phone: String
  phone2: String
}

""" input to update an existing school """
input InputUpdateSchool {
  id: Int!
  acronym: String
  name: String
  online: Boolean
  hashtag: String
  description: String
  startDate: DateTime
  endDate: DateTime
  outreachStartDate: DateTime
  outreachEndDate: DateTime
  miniOutreachStartDate: DateTime
  miniOutreachEndDate: DateTime
  schoolEmail: String
  currency: String
  secondary: Boolean
  applicationFee: Int
  schoolFee: Int
  miniOutreachFee: Int
  outreachFee: Int
  questionCollection: Int
}

""" input to update an existing schoolApplication """
input InputUpdateSchoolApplication {
  id: Int
  status: String
  progress: String
  answers: [InputApplicationAnswer]
}

""" used for updating an existing user """
input InputUpdateUser {
  id: Int!
  firstName: String
  lastName: String
  gender: String
  marriage: String
  maritalStatusDate: DateTime
  spouseName: String
  children: Int
  birthday: DateTime
  website: String
  youtube: String
  facebook: String
  talents: String
  firstLanguage: String
  nativeLanguage: String
  secondLanguage: String
  secondLanguagePro: Int
  thirdLanguage: String
  thirdLanguagePro: Int
  otherLanguage: String
  otherLanguagePro: Int
  life: String
}

type Mutation {
  _empty: String

  """ register a new user """
  createAdmin(input: InputRegisterUser!): UserLogin!
  registerUser(input: InputRegisterUser!): UserLogin!

  """ update User properties """
  updateUser(input: InputUpdateUser!): User

  """ login as a user """
  loginUser(input: InputLogin!): UserLogin!

  """ create a new school """
  createSchool(input: InputCreateSchool!): School
  updateSchool(input: InputUpdateSchool!): School
  deleteSchool(input: InputDeleteSchool!): Boolean
  addStudent(input: InputAddStudent!): School
  addStaff(input: InputAddStaff): School
  removeStudent(input: InputRemoveStudent!): School
  removeStaff(input: InputRemoveStaff): School

  """ create a new schoolApplication """
  createSchoolApplication(input: InputCreateSchoolApplication!): SchoolApplication
  updateSchoolApplication(input: InputUpdateSchoolApplication!): SchoolApplication
  deleteSchoolApplication(input: InputDeleteSchoolApplication!): Boolean
  cancelSchoolApplication(input: InputDeleteSchoolApplication!): SchoolApplication
  acceptApplication(appId: Int!): SchoolApplication
  createApplicationQuestion(input: InputCreateApplicationQuestion!): ApplicationQuestion
  createApplicationQuestionCollection(input: InputCreateApplicationQuestionCollection!): ApplicationQuestionCollection
  updateAddress(input: InputUpdateAddress!): Address
  createAddress(input: InputCreateAddress!): Address
  deleteAddress(id: Int!): Address
}

""" a type defining a user's public data """
type PublicUser {
  id: Int!
  fullName: String
  email: String!
}

type Query {
  _empty: String

  """ get a user's public data"""
  getPublicUser(id: Int!): PublicUser
  getUser(id: Int): User
  hasAdmin: Boolean

  """ get all schools """
  getSchools(online: Boolean): [School!]
  getSchoolInfoForApplication(schoolId: Int!): School

  """ get all schoolApplications """
  getSchoolApplications: [SchoolApplication]
  getApplications(schoolId: Int!): [SchoolApplication]
  getMyApplications: [SchoolApplication]
  getApplicationQuestionCollections: [ApplicationQuestionCollection]
  getMyAddresses: [Address]
}

enum Role {
  USER
  STUDENT
  STAFF
  SCHOOLADMIN
  ADMIN
}

type School {
  id: Int!
  acronym: String!
  name: String!
  online: Boolean
  hashtag: String
  description: String
  students: [PublicUser!]
  staffs: [PublicUser!]
  applications: [SchoolApplication!]
  questions: [ApplicationQuestion!]
  startDate: DateTime
  endDate: DateTime
  outreachStartDate: DateTime
  outreachEndDate: DateTime
  miniOutreachStartDate: DateTime
  miniOutreachEndDate: DateTime
  schoolEmail: String
  timestamp: String
  currency: String
  secondary: Boolean
  applicationFee: Int
  schoolFee: Int
  miniOutreachFee: Int
  outreachFee: Int
}

type SchoolApplication {
  id: Int
  status: String
  progress: String
  accepted: Boolean
  acceptedDate: DateTime
  school: School
  transferredFrom: School
  answers: [ApplicationAnswer]
  user: PublicUser
  created: DateTime
  submitted: DateTime
}

type Subscription {
  _empty: String

  """ called when a new school is created """
  schoolCreated: School

  """ called when a new schoolApplication is created """
  schoolApplicationCreated: SchoolApplication
}

""" a type defining a user  """
type User {
  id: Int!
  firstName: String
  lastName: String
  fullName: String
  gender: String
  role: Role
  marriage: String
  maritalStatusDate: DateTime
  spouseName: String
  children: Int
  birthday: DateTime
  email: String!
  website: String
  youtube: String
  facebook: String
  emailActivated: Boolean
  talents: String
  firstLanguage: String
  nativeLanguage: String
  secondLanguage: String
  secondLanguagePro: Int
  thirdLanguage: String
  thirdLanguagePro: Int
  otherLanguage: String
  otherLanguagePro: Int
  life: String
  addresses: [Address]
}

type UserLogin {
  token: String!
  user: User!
}
